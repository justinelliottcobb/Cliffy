name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wasm:
    name: Build WASM for Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: release-${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: release-${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build optimized WASM package
        run: |
          wasm-pack build cliffy-wasm \
            --target web \
            --out-dir pkg \
            --features simd \
            --release
      
      - name: Upload WASM release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-release
          path: cliffy-wasm/pkg/

  build-npm-package:
    name: Build NPM Package
    runs-on: ubuntu-latest
    needs: build-wasm
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download WASM artifacts
        uses: actions/download-artifact@v5
        with:
          name: wasm-release
          path: cliffy-wasm/pkg/
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript
        run: npm run build:typescript
      
      - name: Build PureScript
        run: npm run build:purescript
        continue-on-error: true
      
      - name: Package for NPM
        run: |
          cd cliffy-typescript
          npm pack
      
      - name: Upload NPM package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: cliffy-typescript/*.tgz

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-wasm, build-npm-package]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download NPM package
        uses: actions/download-artifact@v5
        with:
          name: npm-package
          path: .
      
      - name: Publish to NPM
        run: npm publish *.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-wasm, build-npm-package]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v5
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Cliffy v${{ github.event.inputs.version }}
          draft: false
          prerelease: true
          body: |
            ## Cliffy Framework Release v${{ github.event.inputs.version }}
            
            Revolutionary Geometric Algebra Web Framework
            
            ### What's New
            - Clifford/Geometric Algebra mathematical foundation
            - Algebraic TSX compile-time graph specification
            - Direct mathematical transformations (no virtual DOM)
            - WASM-optimized geometric operations with SIMD
            
            ### Artifacts
            - WASM library with SIMD optimization
            - TypeScript bindings and framework
            - PureScript functional bindings
            
            ### Installation
            ```bash
            npm install cliffy@${{ github.event.inputs.version }}
            ```
          files: |
            wasm-release/**/*
            npm-package/**/*